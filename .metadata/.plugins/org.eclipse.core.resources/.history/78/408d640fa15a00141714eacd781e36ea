import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;


class BITMAP {

	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
int t=Integer.parseInt(br.readLine());
StringBuilder sb=new StringBuilder();
while(t-->0){
	Graph g=new Graph();
	StringTokenizer st=new StringTokenizer(br.readLine());
	int a=Integer.parseInt(st.nextToken());
	int b=Integer.parseInt(st.nextToken());
	List<Integer> graph[]=g.createGraph(a*b);
	
	int white[][]=new int[a*b][2];
	int array[][]=new int[a][b];
	int distance[]=new int[a*b];
	int k=0,n=0;
	for(int i=0;i<a;i++){
		st=new StringTokenizer(br.readLine());
		for(int j=0;j<b;j++){
			array[i][j]=Integer.parseInt(st.nextToken());
			if(array[i][j]==1){
				white[k][0]=i;
				white[k++][1]=j;
		}
			if(n-1>=0)
				g.addEdge(graph,n, n-1);
			//graph[i+j].add(i+j-1);
			if(n+1<a*b)
			g.addEdge(graph,n,n+1);
			if(n+b<a*b)
				g.addEdge(graph, n, n+b);
			if(n-b>=0)
				g.addEdge(graph, n, n-b);
			n++;
		}
	}
	for(int i=0;i<k;i++){
		g.BFS(graph,white[i][0],white[i][1]);
	}
}
	}
static class Graph{
	int distance[];
	char colour[];
	int parent[];
	public List<Integer>[] createGraph(int size){
		List<Integer> graph[]=new List[size];
		for(int i=0;i<size;i++)
			graph[i]=new ArrayList<Integer>();
		
		distance=new int[size];
		colour=new char[size];
		parent=new int[size];
		Arrays.fill(distance, 0);
		Arrays.fill(colour, 'W');
		Arrays.fill(parent, -1);
		return graph;
	}
	public void addEdge(List<Integer> graph[],int s,int d){
		graph[s].add(d);
		graph[d].add(s);
	}
	public void BFS(List<Integer> graph[],int i,int j){
		
	}
}
}
